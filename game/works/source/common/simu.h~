#ifndef __SIMU_H__
#define __SIMU_H__

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>

#include "action.h"
#include "eval.h"
#include "gamestate.h"
#include "timer.h"

#define NUM_RAISE_LIMIT     2
#define SEED_COUNT          100

typedef enum loglevel
{
    LOGLEVEL_NONE,
    LOGLEVEL_INFO,
    LOGLEVEL_DEBUG
} LOGLEVEL;

typedef struct pokerai
{
    //Worker threads
    pthread_mutex_t mutex;
    pthread_t *threads;
    int num_threads;
    int timeout;

    //Random seeds for worker threads
    pthread_mutex_t seed_mutex;
    bool *seed_avail;
    int *seeds;

    //Scoring
    int games_won;
    int games_simulated;

    //Current game state
    GameState game;
    int num_times_raised;

    //Recommended action
    Action action;

    //Logging for debugging purposes
    LOGLEVEL loglevel;
    FILE *logfile;

	int aimoney;  //剩余的金币
    //Heuristics!
    //TODO
} PokerAI;

PokerAI *CreatePokerAI(int timeout);

void DestroyPokerAI(PokerAI *ai);

void SetLogging(PokerAI *ai, LOGLEVEL level, FILE *file);

void UpdateGameState(PokerAI *ai, stMsg_t stOneMsg);

void SetHand(PokerAI *ai, char **hand, int handsize);

void SetCommunity(PokerAI *ai, char **community, int communitysize);

bool MyTurn(PokerAI *ai);

char *GetBestAction(PokerAI *ai);

double GetWinProbability(PokerAI *ai);

void WriteAction(PokerAI *ai, FILE *file);

#endif
